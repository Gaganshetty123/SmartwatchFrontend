import { Component, OnInit } from '@angular/core';
import { RepairIssue } from '../../../core/models/RepairIssues.model';
import { RepairIssueService } from '../../../core/services/repairIssues.service';

@Component({
  selector: 'app-repair-issues',
  standalone: false,
  templateUrl: './repair-issues.component.html',
  styleUrls: ['./repair-issues.component.scss']
})
export class RepairIssuesComponent implements OnInit {
  repairIssues: RepairIssue[] = [];
  newIssueName = '';
  newBasePrice: number | null = null;
  newDeviceModelId: number | null = null;
  
  // Flags for edit mode
  isEditing: { [key: number]: boolean } = {}; // key is the repairIssue id, value is true/false

  constructor(private repairIssueService: RepairIssueService) {}

  ngOnInit(): void {
    this.getRepairIssues();
  }

  // Fetch all repair issues
  getRepairIssues(): void {
    this.repairIssueService.getRepairIssues().subscribe((data) => {
      this.repairIssues = data;
    });
  }

  // Add a new repair issue
  onAdd(): void {
    if (!this.newIssueName.trim() || this.newBasePrice === null || this.newDeviceModelId === null) {
      return;
    }

    const newRepairIssue: RepairIssue = {
      id: 0, // id will be generated by the backend
      deviceModelId: this.newDeviceModelId,
      issueName: this.newIssueName,
      basePrice: this.newBasePrice
    };

    this.repairIssueService.addRepairIssue(newRepairIssue).subscribe(() => {
      this.newIssueName = '';
      this.newBasePrice = null;
      this.newDeviceModelId = null;
      this.getRepairIssues();  // Refresh the list after adding
    });
  }

  // Enable edit mode
  onEdit(id: number): void {
    this.isEditing[id] = true;
  }

  // Update an existing repair issue
  onUpdate(repairIssue: RepairIssue): void {
    console.log('Updating repair issue:', repairIssue);  // Log the payload
  
    this.repairIssueService.updateRepairIssue(repairIssue).subscribe(
      () => {
        this.isEditing[repairIssue.id] = false;  // Disable editing after update
        this.getRepairIssues();  // Refresh the list after updating
      },
      (error) => {
        console.error('Update failed:', error);  // Log the error for better debugging
      }
    );
  }
  

  // Delete a repair issue
  onDelete(id: number): void {
    this.repairIssueService.deleteRepairIssue(id).subscribe(() => {
      this.getRepairIssues();  // Refresh the list after deleting
    });
  }
}
